"""
Module de visualisation des donn√©es des copropri√©taires avec Streamlit.

Ce script cr√©e une application web pour afficher :
- L'√©volution globale des d√©bits et cr√©dits de tous les copropri√©taires.
- Les courbes de d√©bit et cr√©dit pour chaque copropri√©taire s√©lectionn√©.
"""

import sqlite3
from pathlib import Path

import pandas as pd
import plotly.express as px
import streamlit as st

# Chemin vers la base de donn√©es
DB_PATH = Path(__file__).parent / "coproprietaires.sqlite"


@st.cache_data
def charger_donnees(db_path: Path) -> pd.DataFrame:
    """
    Charge les donn√©es depuis la base de donn√©es SQLite.

    Args:
        db_path (Path): Chemin vers la base de donn√©es.

    Returns:
        pd.DataFrame: Un DataFrame contenant les donn√©es des copropri√©taires.
    """
    if not db_path.exists():
        st.error(f"La base de donn√©es '{db_path}' est introuvable.")
        return pd.DataFrame()

    try:
        with sqlite3.connect(db_path) as conn:
            query = "SELECT code, coproprietaire, debit, credit, date FROM coproprietaires ORDER BY date ASC"
            df = pd.read_sql_query(query, conn)
    except sqlite3.Error as e:
        st.error(f"Erreur lors de la connexion √† la base de donn√©es : {e}")
        return pd.DataFrame()

    df["date"] = pd.to_datetime(df["date"])
    return df


def main() -> None:
    """
    Fonction principale de l'application Streamlit.
    """
    st.set_page_config(layout="wide", page_title="Analyse des Soldes Copropri√©taires")
    st.title("üìà Analyse des soldes des copropri√©taires")

    df = charger_donnees(DB_PATH)

    if df.empty:
        st.warning("Aucune donn√©e √† afficher.")
        return

    # --- Section des graphiques globaux ---
    st.header("Vue d'ensemble : D√©bits et Cr√©dits Globaux")

    # Agr√©ger les donn√©es par date
    df_global = df.groupby("date")[["debit", "credit"]].sum().reset_index()

    col1, col2 = st.columns(2)

    with col1:
        fig_debit_global = px.line(
            df_global,
            x="date",
            y="debit",
            title="√âvolution du D√©bit Total",
            labels={"date": "Date", "debit": "Montant du D√©bit (‚Ç¨)"},
        )
        st.plotly_chart(fig_debit_global, use_container_width=True)

    with col2:
        fig_credit_global = px.line(
            df_global,
            x="date",
            y="credit",
            title="√âvolution du Cr√©dit Total",
            labels={"date": "Date", "credit": "Montant du Cr√©dit (‚Ç¨)"},
        )
        st.plotly_chart(fig_credit_global, use_container_width=True)

    # --- Section des graphiques par copropri√©taire ---
    st.header("Analyse par Copropri√©taire")

    liste_coproprietaires = sorted(df["coproprietaire"].unique())
    selection_copros = st.multiselect(
        "S√©lectionnez un ou plusieurs copropri√©taires :",
        options=liste_coproprietaires,
    )

    if selection_copros:
        df_filtre = df[df["coproprietaire"].isin(selection_copros)]
        fig_individuel = px.line(
            df_filtre,
            x="date",
            y=["debit", "credit"],
            color="coproprietaire",
            title="√âvolution des D√©bits et Cr√©dits par Copropri√©taire",
            labels={
                "value": "Montant (‚Ç¨)",
                "date": "Date",
                "variable": "Type de Mouvement",
            },
        )
        st.plotly_chart(fig_individuel, use_container_width=True)


if __name__ == "__main__":
    main()
